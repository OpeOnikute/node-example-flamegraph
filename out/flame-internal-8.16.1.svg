<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>strlen (1 samples, 0.20%)</title><rect x="1175.6" y="197" width="2.4" height="15.0" fill="rgb(235,157,16)" rx="2" ry="2" />
<text  x="1178.58" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:LdaCurrentContextSlot (1 samples, 0.20%)</title><rect x="545.9" y="197" width="2.4" height="15.0" fill="rgb(214,29,44)" rx="2" ry="2" />
<text  x="548.93" y="207.5" ></text>
</g>
<g >
<title>__kernel_clock_gettime (2 samples, 0.41%)</title><rect x="1185.2" y="181" width="4.8" height="15.0" fill="rgb(223,203,49)" rx="2" ry="2" />
<text  x="1188.19" y="191.5" ></text>
</g>
<g >
<title>operator delete[]@plt (1 samples, 0.20%)</title><rect x="726.2" y="181" width="2.4" height="15.0" fill="rgb(224,147,34)" rx="2" ry="2" />
<text  x="729.17" y="191.5" ></text>
</g>
<g >
<title>vfprintf (1 samples, 0.20%)</title><rect x="1182.8" y="181" width="2.4" height="15.0" fill="rgb(254,221,39)" rx="2" ry="2" />
<text  x="1185.79" y="191.5" ></text>
</g>
<g >
<title>__pthread_once_slow (2 samples, 0.41%)</title><rect x="1110.7" y="149" width="4.8" height="15.0" fill="rgb(220,128,36)" rx="2" ry="2" />
<text  x="1113.69" y="159.5" ></text>
</g>
<g >
<title>v8::Context::New (1 samples, 0.20%)</title><rect x="646.9" y="149" width="2.4" height="15.0" fill="rgb(225,183,19)" rx="2" ry="2" />
<text  x="649.86" y="159.5" ></text>
</g>
<g >
<title>node::InternalModuleReadFile (1 samples, 0.20%)</title><rect x="1115.5" y="197" width="2.4" height="15.0" fill="rgb(244,153,38)" rx="2" ry="2" />
<text  x="1118.50" y="207.5" ></text>
</g>
<g >
<title>memcmp (1 samples, 0.20%)</title><rect x="769.4" y="197" width="2.4" height="15.0" fill="rgb(249,50,1)" rx="2" ry="2" />
<text  x="772.43" y="207.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.61%)</title><rect x="759.8" y="197" width="7.2" height="15.0" fill="rgb(237,198,36)" rx="2" ry="2" />
<text  x="762.82" y="207.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::InitializeUV (1 samples, 0.20%)</title><rect x="1091.5" y="181" width="2.4" height="15.0" fill="rgb(236,145,42)" rx="2" ry="2" />
<text  x="1094.47" y="191.5" ></text>
</g>
<g >
<title>v8::Object::Set (2 samples, 0.41%)</title><rect x="1103.5" y="149" width="4.8" height="15.0" fill="rgb(222,178,18)" rx="2" ry="2" />
<text  x="1106.48" y="159.5" ></text>
</g>
<g >
<title>BytecodeHandler:Star (1 samples, 0.20%)</title><rect x="627.6" y="197" width="2.4" height="15.0" fill="rgb(218,147,34)" rx="2" ry="2" />
<text  x="630.64" y="207.5" ></text>
</g>
<g >
<title>ERR_load_crypto_strings (2 samples, 0.41%)</title><rect x="1110.7" y="101" width="4.8" height="15.0" fill="rgb(207,104,29)" rx="2" ry="2" />
<text  x="1113.69" y="111.5" ></text>
</g>
<g >
<title>node::Start (14 samples, 2.85%)</title><rect x="639.7" y="165" width="33.6" height="15.0" fill="rgb(245,99,29)" rx="2" ry="2" />
<text  x="642.65" y="175.5" >no..</text>
</g>
<g >
<title>free (1 samples, 0.20%)</title><rect x="702.1" y="181" width="2.4" height="15.0" fill="rgb(209,27,31)" rx="2" ry="2" />
<text  x="705.14" y="191.5" ></text>
</g>
<g >
<title>_IO_fwrite (1 samples, 0.20%)</title><rect x="661.3" y="133" width="2.4" height="15.0" fill="rgb(219,133,38)" rx="2" ry="2" />
<text  x="664.28" y="143.5" ></text>
</g>
<g >
<title>write (3 samples, 0.61%)</title><rect x="666.1" y="69" width="7.2" height="15.0" fill="rgb(251,207,16)" rx="2" ry="2" />
<text  x="669.09" y="79.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.41%)</title><rect x="1053.0" y="149" width="4.8" height="15.0" fill="rgb(221,73,6)" rx="2" ry="2" />
<text  x="1056.01" y="159.5" ></text>
</g>
<g >
<title>SSL_load_error_strings (2 samples, 0.41%)</title><rect x="1110.7" y="117" width="4.8" height="15.0" fill="rgb(216,202,44)" rx="2" ry="2" />
<text  x="1113.69" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (1 samples, 0.20%)</title><rect x="471.4" y="181" width="2.4" height="15.0" fill="rgb(251,41,10)" rx="2" ry="2" />
<text  x="474.43" y="191.5" ></text>
</g>
<g >
<title>v8::Object::Get (1 samples, 0.20%)</title><rect x="1089.1" y="181" width="2.4" height="15.0" fill="rgb(215,171,12)" rx="2" ry="2" />
<text  x="1092.06" y="191.5" ></text>
</g>
<g >
<title>operator new@plt (2 samples, 0.41%)</title><rect x="735.8" y="181" width="4.8" height="15.0" fill="rgb(211,72,25)" rx="2" ry="2" />
<text  x="738.78" y="191.5" ></text>
</g>
<g >
<title>node::Start (15 samples, 3.05%)</title><rect x="639.7" y="181" width="36.0" height="15.0" fill="rgb(242,159,41)" rx="2" ry="2" />
<text  x="642.65" y="191.5" >nod..</text>
</g>
<g >
<title>v8::NewContext (1 samples, 0.20%)</title><rect x="646.9" y="133" width="2.4" height="15.0" fill="rgb(246,34,26)" rx="2" ry="2" />
<text  x="649.86" y="143.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.20%)</title><rect x="519.5" y="181" width="2.4" height="15.0" fill="rgb(225,15,0)" rx="2" ry="2" />
<text  x="522.49" y="191.5" ></text>
</g>
<g >
<title>v8::base::OS::VSNPrintF (1 samples, 0.20%)</title><rect x="1081.9" y="149" width="2.4" height="15.0" fill="rgb(247,131,36)" rx="2" ry="2" />
<text  x="1084.85" y="159.5" ></text>
</g>
<g >
<title>ERR_load_strings (1 samples, 0.20%)</title><rect x="1110.7" y="69" width="2.4" height="15.0" fill="rgb(231,85,9)" rx="2" ry="2" />
<text  x="1113.69" y="79.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.20%)</title><rect x="519.5" y="165" width="2.4" height="15.0" fill="rgb(218,101,9)" rx="2" ry="2" />
<text  x="522.49" y="175.5" ></text>
</g>
<g >
<title>v8::Object::DefineOwnProperty (1 samples, 0.20%)</title><rect x="1101.1" y="165" width="2.4" height="15.0" fill="rgb(215,189,52)" rx="2" ry="2" />
<text  x="1104.08" y="175.5" ></text>
</g>
<g >
<title>icu_60::CollationFastLatin::compareUTF16 (3 samples, 0.61%)</title><rect x="706.9" y="165" width="7.3" height="15.0" fill="rgb(232,188,44)" rx="2" ry="2" />
<text  x="709.95" y="175.5" ></text>
</g>
<g >
<title>v8::Script::Compile (3 samples, 0.61%)</title><rect x="639.7" y="133" width="7.2" height="15.0" fill="rgb(248,2,4)" rx="2" ry="2" />
<text  x="642.65" y="143.5" ></text>
</g>
<g >
<title>BytecodeHandler:JumpIfToBooleanFalse (1 samples, 0.20%)</title><rect x="533.9" y="197" width="2.4" height="15.0" fill="rgb(230,202,50)" rx="2" ry="2" />
<text  x="536.91" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:JumpIfToBooleanTrue (2 samples, 0.41%)</title><rect x="536.3" y="197" width="4.8" height="15.0" fill="rgb(234,185,29)" rx="2" ry="2" />
<text  x="539.31" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:LdaNamedProperty (12 samples, 2.44%)</title><rect x="565.2" y="197" width="28.8" height="15.0" fill="rgb(237,66,32)" rx="2" ry="2" />
<text  x="568.15" y="207.5" >By..</text>
</g>
<g >
<title>malloc (1 samples, 0.20%)</title><rect x="1168.4" y="165" width="2.4" height="15.0" fill="rgb(245,212,37)" rx="2" ry="2" />
<text  x="1171.37" y="175.5" ></text>
</g>
<g >
<title>_IO_file_overflow (1 samples, 0.20%)</title><rect x="661.3" y="101" width="2.4" height="15.0" fill="rgb(230,151,11)" rx="2" ry="2" />
<text  x="664.28" y="111.5" ></text>
</g>
<g >
<title>memcmp (5 samples, 1.02%)</title><rect x="1057.8" y="149" width="12.0" height="15.0" fill="rgb(206,100,40)" rx="2" ry="2" />
<text  x="1060.82" y="159.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.41%)</title><rect x="1122.7" y="197" width="4.8" height="15.0" fill="rgb(230,147,8)" rx="2" ry="2" />
<text  x="1125.71" y="207.5" ></text>
</g>
<g >
<title>v8::base::OS::VSNPrintF (1 samples, 0.20%)</title><rect x="673.3" y="133" width="2.4" height="15.0" fill="rgb(231,202,14)" rx="2" ry="2" />
<text  x="676.30" y="143.5" ></text>
</g>
<g >
<title>BytecodeHandler:StaKeyedPropertyStrict (7 samples, 1.43%)</title><rect x="603.6" y="197" width="16.8" height="15.0" fill="rgb(238,82,46)" rx="2" ry="2" />
<text  x="606.60" y="207.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.61%)</title><rect x="728.6" y="181" width="7.2" height="15.0" fill="rgb(216,104,47)" rx="2" ry="2" />
<text  x="731.57" y="191.5" ></text>
</g>
<g >
<title>v8::IsolateNewImpl (10 samples, 2.04%)</title><rect x="649.3" y="149" width="24.0" height="15.0" fill="rgb(210,124,52)" rx="2" ry="2" />
<text  x="652.27" y="159.5" >v..</text>
</g>
<g >
<title>BytecodeHandler:Ldar (1 samples, 0.20%)</title><rect x="526.7" y="181" width="2.4" height="15.0" fill="rgb(213,148,39)" rx="2" ry="2" />
<text  x="529.70" y="191.5" ></text>
</g>
<g >
<title>node::crypto::InitCrypto (2 samples, 0.41%)</title><rect x="1110.7" y="181" width="4.8" height="15.0" fill="rgb(210,22,23)" rx="2" ry="2" />
<text  x="1113.69" y="191.5" ></text>
</g>
<g >
<title>_IO_do_write (1 samples, 0.20%)</title><rect x="1182.8" y="149" width="2.4" height="15.0" fill="rgb(234,21,32)" rx="2" ry="2" />
<text  x="1185.79" y="159.5" ></text>
</g>
<g >
<title>BytecodeHandler:LdaKeyedProperty (6 samples, 1.22%)</title><rect x="550.7" y="197" width="14.5" height="15.0" fill="rgb(252,70,4)" rx="2" ry="2" />
<text  x="553.73" y="207.5" ></text>
</g>
<g >
<title>v8::base::TimeTicks::HighResolutionNow (2 samples, 0.41%)</title><rect x="1185.2" y="197" width="4.8" height="15.0" fill="rgb(249,78,34)" rx="2" ry="2" />
<text  x="1188.19" y="207.5" ></text>
</g>
<g >
<title>vfprintf (1 samples, 0.20%)</title><rect x="473.8" y="149" width="2.4" height="15.0" fill="rgb(236,137,41)" rx="2" ry="2" />
<text  x="476.83" y="159.5" ></text>
</g>
<g >
<title>int_err_set_item (1 samples, 0.20%)</title><rect x="1113.1" y="69" width="2.4" height="15.0" fill="rgb(239,229,44)" rx="2" ry="2" />
<text  x="1116.10" y="79.5" ></text>
</g>
<g >
<title>BytecodeHandler:JumpIfTrue (1 samples, 0.20%)</title><rect x="541.1" y="197" width="2.4" height="15.0" fill="rgb(214,35,24)" rx="2" ry="2" />
<text  x="544.12" y="207.5" ></text>
</g>
<g >
<title>uv_fs_open (1 samples, 0.20%)</title><rect x="1115.5" y="181" width="2.4" height="15.0" fill="rgb(212,86,4)" rx="2" ry="2" />
<text  x="1118.50" y="191.5" ></text>
</g>
<g >
<title>vfprintf (1 samples, 0.20%)</title><rect x="1081.9" y="117" width="2.4" height="15.0" fill="rgb(251,15,6)" rx="2" ry="2" />
<text  x="1084.85" y="127.5" ></text>
</g>
<g >
<title>node::BackgroundRunner (20 samples, 4.07%)</title><rect x="1127.5" y="181" width="48.1" height="15.0" fill="rgb(247,11,22)" rx="2" ry="2" />
<text  x="1130.52" y="191.5" >node..</text>
</g>
<g >
<title>v8::Object::Set (2 samples, 0.41%)</title><rect x="1096.3" y="165" width="4.8" height="15.0" fill="rgb(211,66,38)" rx="2" ry="2" />
<text  x="1099.27" y="175.5" ></text>
</g>
<g >
<title>uprv_malloc_60 (1 samples, 0.20%)</title><rect x="521.9" y="165" width="2.4" height="15.0" fill="rgb(221,117,13)" rx="2" ry="2" />
<text  x="524.89" y="175.5" ></text>
</g>
<g >
<title>BytecodeHandler:CallUndefinedReceiver (1 samples, 0.20%)</title><rect x="524.3" y="197" width="2.4" height="15.0" fill="rgb(236,36,8)" rx="2" ry="2" />
<text  x="527.30" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:Construct (1 samples, 0.20%)</title><rect x="526.7" y="197" width="2.4" height="15.0" fill="rgb(236,27,45)" rx="2" ry="2" />
<text  x="529.70" y="207.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.20%)</title><rect x="1125.1" y="181" width="2.4" height="15.0" fill="rgb(225,73,17)" rx="2" ry="2" />
<text  x="1128.11" y="191.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::ContextifyScript::EvalMachine (2 samples, 0.41%)</title><rect x="1084.3" y="181" width="4.8" height="15.0" fill="rgb(211,115,28)" rx="2" ry="2" />
<text  x="1087.26" y="191.5" ></text>
</g>
<g >
<title>AddBoundMethod native intl.js:35 (8 samples, 1.63%)</title><rect x="457.0" y="197" width="19.2" height="15.0" fill="rgb(227,164,37)" rx="2" ry="2" />
<text  x="460.01" y="207.5" ></text>
</g>
<g >
<title>v8::Object::Get (2 samples, 0.41%)</title><rect x="776.6" y="181" width="4.8" height="15.0" fill="rgb(219,109,30)" rx="2" ry="2" />
<text  x="779.64" y="191.5" ></text>
</g>
<g >
<title>BytecodeHandler:StaNamedPropertyStrict (1 samples, 0.20%)</title><rect x="622.8" y="197" width="2.4" height="15.0" fill="rgb(245,115,4)" rx="2" ry="2" />
<text  x="625.83" y="207.5" ></text>
</g>
<g >
<title>v8::Object::DefineOwnProperty (1 samples, 0.20%)</title><rect x="1093.9" y="149" width="2.4" height="15.0" fill="rgb(219,84,44)" rx="2" ry="2" />
<text  x="1096.87" y="159.5" ></text>
</g>
<g >
<title>A native intl.js:41 (1 samples, 0.20%)</title><rect x="454.6" y="197" width="2.4" height="15.0" fill="rgb(222,220,33)" rx="2" ry="2" />
<text  x="457.60" y="207.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::ContextifyScript::New (128 samples, 26.07%)</title><rect x="776.6" y="197" width="307.7" height="15.0" fill="rgb(237,70,7)" rx="2" ry="2" />
<text  x="779.64" y="207.5" >node::(anonymous namespace)::ContextifySc..</text>
</g>
<g >
<title>uv (1 samples, 0.20%)</title><rect x="1120.3" y="181" width="2.4" height="15.0" fill="rgb(209,174,5)" rx="2" ry="2" />
<text  x="1123.31" y="191.5" ></text>
</g>
<g >
<title>node::crypto::InitCryptoOnce (2 samples, 0.41%)</title><rect x="1110.7" y="133" width="4.8" height="15.0" fill="rgb(214,222,54)" rx="2" ry="2" />
<text  x="1113.69" y="143.5" ></text>
</g>
<g >
<title>Handler:An IC handler from the snapshot (2 samples, 0.41%)</title><rect x="634.8" y="197" width="4.9" height="15.0" fill="rgb(249,136,50)" rx="2" ry="2" />
<text  x="637.85" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:StaKeyedPropertySloppy (1 samples, 0.20%)</title><rect x="601.2" y="197" width="2.4" height="15.0" fill="rgb(244,61,11)" rx="2" ry="2" />
<text  x="604.20" y="207.5" ></text>
</g>
<g >
<title>node::UDPWrap::Initialize (1 samples, 0.20%)</title><rect x="1108.3" y="181" width="2.4" height="15.0" fill="rgb(214,169,35)" rx="2" ry="2" />
<text  x="1111.29" y="191.5" ></text>
</g>
<g >
<title>_IO_file_xsputn (3 samples, 0.61%)</title><rect x="666.1" y="101" width="7.2" height="15.0" fill="rgb(229,191,40)" rx="2" ry="2" />
<text  x="669.09" y="111.5" ></text>
</g>
<g >
<title>uv_once (2 samples, 0.41%)</title><rect x="1110.7" y="165" width="4.8" height="15.0" fill="rgb(225,88,21)" rx="2" ry="2" />
<text  x="1113.69" y="175.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.20%)</title><rect x="663.7" y="133" width="2.4" height="15.0" fill="rgb(249,135,10)" rx="2" ry="2" />
<text  x="666.69" y="143.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.61%)</title><rect x="728.6" y="165" width="7.2" height="15.0" fill="rgb(236,225,2)" rx="2" ry="2" />
<text  x="731.57" y="175.5" ></text>
</g>
<g >
<title>CRYPTO_malloc (1 samples, 0.20%)</title><rect x="1113.1" y="37" width="2.4" height="15.0" fill="rgb(236,23,33)" rx="2" ry="2" />
<text  x="1116.10" y="47.5" ></text>
</g>
<g >
<title>BytecodeHandler:TestEqualStrict (2 samples, 0.41%)</title><rect x="630.0" y="197" width="4.8" height="15.0" fill="rgb(250,170,43)" rx="2" ry="2" />
<text  x="633.04" y="207.5" ></text>
</g>
<g >
<title>v8::base::OS::FPrint (3 samples, 0.61%)</title><rect x="666.1" y="133" width="7.2" height="15.0" fill="rgb(239,175,24)" rx="2" ry="2" />
<text  x="669.09" y="143.5" ></text>
</g>
<g >
<title>v8::ScriptCompiler::CompileUnboundScript (126 samples, 25.66%)</title><rect x="781.4" y="181" width="302.9" height="15.0" fill="rgb(229,181,17)" rx="2" ry="2" />
<text  x="784.45" y="191.5" >v8::ScriptCompiler::CompileUnboundScript</text>
</g>
<g >
<title>node::InitConfig (1 samples, 0.20%)</title><rect x="1101.1" y="181" width="2.4" height="15.0" fill="rgb(222,126,49)" rx="2" ry="2" />
<text  x="1104.08" y="191.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.20%)</title><rect x="1069.8" y="149" width="2.4" height="15.0" fill="rgb(213,54,52)" rx="2" ry="2" />
<text  x="1072.84" y="159.5" ></text>
</g>
<g >
<title>_IO_file_xsputn (1 samples, 0.20%)</title><rect x="661.3" y="117" width="2.4" height="15.0" fill="rgb(209,167,19)" rx="2" ry="2" />
<text  x="664.28" y="127.5" ></text>
</g>
<g >
<title>node::Binding (10 samples, 2.04%)</title><rect x="1091.5" y="197" width="24.0" height="15.0" fill="rgb(219,93,4)" rx="2" ry="2" />
<text  x="1094.47" y="207.5" >n..</text>
</g>
<g >
<title>node::DefineConstants (1 samples, 0.20%)</title><rect x="1093.9" y="181" width="2.4" height="15.0" fill="rgb(211,195,52)" rx="2" ry="2" />
<text  x="1096.87" y="191.5" ></text>
</g>
<g >
<title>v8::V8::Initialize (1 samples, 0.20%)</title><rect x="673.3" y="165" width="2.4" height="15.0" fill="rgb(240,228,9)" rx="2" ry="2" />
<text  x="676.30" y="175.5" ></text>
</g>
<g >
<title>__libc_open64 (1 samples, 0.20%)</title><rect x="1115.5" y="149" width="2.4" height="15.0" fill="rgb(248,155,37)" rx="2" ry="2" />
<text  x="1118.50" y="159.5" ></text>
</g>
<g >
<title>BytecodeHandler:AddSmi (1 samples, 0.20%)</title><rect x="476.2" y="197" width="2.4" height="15.0" fill="rgb(223,173,28)" rx="2" ry="2" />
<text  x="479.23" y="207.5" ></text>
</g>
<g >
<title>operator delete@plt (1 samples, 0.20%)</title><rect x="723.8" y="181" width="2.4" height="15.0" fill="rgb(212,174,5)" rx="2" ry="2" />
<text  x="726.77" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (2 samples, 0.41%)</title><rect x="1077.0" y="149" width="4.9" height="15.0" fill="rgb(230,184,5)" rx="2" ry="2" />
<text  x="1080.05" y="159.5" ></text>
</g>
<g >
<title>node (491 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(254,141,6)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >node</text>
</g>
<g >
<title>node::(anonymous namespace)::ContextifyScript::RunInThisContext (3 samples, 0.61%)</title><rect x="1084.3" y="197" width="7.2" height="15.0" fill="rgb(252,213,8)" rx="2" ry="2" />
<text  x="1087.26" y="207.5" ></text>
</g>
<g >
<title>get /usr/src/app/node_modules/fast-levenshtein/levenshtein.js:27 (8 samples, 1.63%)</title><rect x="740.6" y="197" width="19.2" height="15.0" fill="rgb(230,131,21)" rx="2" ry="2" />
<text  x="743.59" y="207.5" ></text>
</g>
<g >
<title>v8::base::CallOnceImpl (1 samples, 0.20%)</title><rect x="1180.4" y="197" width="2.4" height="15.0" fill="rgb(220,91,37)" rx="2" ry="2" />
<text  x="1183.39" y="207.5" ></text>
</g>
<g >
<title>v8::ScriptCompiler::CompileUnboundInternal (126 samples, 25.66%)</title><rect x="781.4" y="165" width="302.9" height="15.0" fill="rgb(241,139,44)" rx="2" ry="2" />
<text  x="784.45" y="175.5" >v8::ScriptCompiler::CompileUnboundInternal</text>
</g>
<g >
<title>BytecodeHandler:CallProperty1 (3 samples, 0.61%)</title><rect x="481.0" y="197" width="7.2" height="15.0" fill="rgb(246,14,48)" rx="2" ry="2" />
<text  x="484.04" y="207.5" ></text>
</g>
<g >
<title>v8::TryCatch::~TryCatch (1 samples, 0.20%)</title><rect x="1178.0" y="197" width="2.4" height="15.0" fill="rgb(233,53,25)" rx="2" ry="2" />
<text  x="1180.98" y="207.5" ></text>
</g>
<g >
<title>BytecodeHandler:StaDataPropertyInLiteral (2 samples, 0.41%)</title><rect x="596.4" y="197" width="4.8" height="15.0" fill="rgb(218,178,25)" rx="2" ry="2" />
<text  x="599.40" y="207.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::DefineSystemConstants (1 samples, 0.20%)</title><rect x="1093.9" y="165" width="2.4" height="15.0" fill="rgb(217,27,44)" rx="2" ry="2" />
<text  x="1096.87" y="175.5" ></text>
</g>
<g >
<title>BytecodeHandler:LdaConstant (1 samples, 0.20%)</title><rect x="543.5" y="197" width="2.4" height="15.0" fill="rgb(224,190,40)" rx="2" ry="2" />
<text  x="546.52" y="207.5" ></text>
</g>
<g >
<title>node::Utf8Value::Utf8Value (1 samples, 0.20%)</title><rect x="1117.9" y="181" width="2.4" height="15.0" fill="rgb(229,47,40)" rx="2" ry="2" />
<text  x="1120.90" y="191.5" ></text>
</g>
<g >
<title>uv__fs_work (1 samples, 0.20%)</title><rect x="1115.5" y="165" width="2.4" height="15.0" fill="rgb(252,25,51)" rx="2" ry="2" />
<text  x="1118.50" y="175.5" ></text>
</g>
<g >
<title>write (1 samples, 0.20%)</title><rect x="1182.8" y="133" width="2.4" height="15.0" fill="rgb(229,133,32)" rx="2" ry="2" />
<text  x="1185.79" y="143.5" ></text>
</g>
<g >
<title>BytecodeHandler:CallProperty (1 samples, 0.20%)</title><rect x="478.6" y="197" width="2.4" height="15.0" fill="rgb(210,120,36)" rx="2" ry="2" />
<text  x="481.64" y="207.5" ></text>
</g>
<g >
<title>compare native intl.js:619 (27 samples, 5.50%)</title><rect x="675.7" y="197" width="64.9" height="15.0" fill="rgb(234,26,41)" rx="2" ry="2" />
<text  x="678.70" y="207.5" >compare..</text>
</g>
<g >
<title>memcpy (2 samples, 0.41%)</title><rect x="771.8" y="197" width="4.8" height="15.0" fill="rgb(251,198,0)" rx="2" ry="2" />
<text  x="774.83" y="207.5" ></text>
</g>
<g >
<title>node::Buffer::HasInstance (1 samples, 0.20%)</title><rect x="1117.9" y="165" width="2.4" height="15.0" fill="rgb(210,160,48)" rx="2" ry="2" />
<text  x="1120.90" y="175.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.20%)</title><rect x="469.0" y="181" width="2.4" height="15.0" fill="rgb(245,131,51)" rx="2" ry="2" />
<text  x="472.02" y="191.5" ></text>
</g>
<g >
<title>memchr (1 samples, 0.20%)</title><rect x="767.0" y="197" width="2.4" height="15.0" fill="rgb(223,0,1)" rx="2" ry="2" />
<text  x="770.03" y="207.5" ></text>
</g>
<g >
<title>vsnprintf (1 samples, 0.20%)</title><rect x="673.3" y="117" width="2.4" height="15.0" fill="rgb(223,150,51)" rx="2" ry="2" />
<text  x="676.30" y="127.5" ></text>
</g>
<g >
<title>v8::FunctionTemplate::GetFunction (1 samples, 0.20%)</title><rect x="1108.3" y="149" width="2.4" height="15.0" fill="rgb(232,123,31)" rx="2" ry="2" />
<text  x="1111.29" y="159.5" ></text>
</g>
<g >
<title>v8::base::OS::VSNPrintF (1 samples, 0.20%)</title><rect x="473.8" y="181" width="2.4" height="15.0" fill="rgb(219,148,8)" rx="2" ry="2" />
<text  x="476.83" y="191.5" ></text>
</g>
<g >
<title>BytecodeHandler:LdaGlobal (1 samples, 0.20%)</title><rect x="548.3" y="197" width="2.4" height="15.0" fill="rgb(210,134,54)" rx="2" ry="2" />
<text  x="551.33" y="207.5" ></text>
</g>
<g >
<title>v8::ScriptCompiler::CompileUnboundInternal (3 samples, 0.61%)</title><rect x="639.7" y="117" width="7.2" height="15.0" fill="rgb(216,188,1)" rx="2" ry="2" />
<text  x="642.65" y="127.5" ></text>
</g>
<g >
<title>lh_insert (1 samples, 0.20%)</title><rect x="1110.7" y="37" width="2.4" height="15.0" fill="rgb(224,179,52)" rx="2" ry="2" />
<text  x="1113.69" y="47.5" ></text>
</g>
<g >
<title>icu_60::UnicodeString::UnicodeString (4 samples, 0.81%)</title><rect x="714.2" y="181" width="9.6" height="15.0" fill="rgb(251,68,25)" rx="2" ry="2" />
<text  x="717.15" y="191.5" ></text>
</g>
<g >
<title>start_thread (20 samples, 4.07%)</title><rect x="1127.5" y="197" width="48.1" height="15.0" fill="rgb(227,29,4)" rx="2" ry="2" />
<text  x="1130.52" y="207.5" >star..</text>
</g>
<g >
<title>BytecodeHandler:StaNamedOwnProperty (1 samples, 0.20%)</title><rect x="620.4" y="197" width="2.4" height="15.0" fill="rgb(231,83,47)" rx="2" ry="2" />
<text  x="623.43" y="207.5" ></text>
</g>
<g >
<title>v8::FunctionTemplate::GetFunction (1 samples, 0.20%)</title><rect x="1108.3" y="165" width="2.4" height="15.0" fill="rgb(211,164,48)" rx="2" ry="2" />
<text  x="1111.29" y="175.5" ></text>
</g>
<g >
<title>node::InitFs (2 samples, 0.41%)</title><rect x="1103.5" y="181" width="4.8" height="15.0" fill="rgb(228,34,9)" rx="2" ry="2" />
<text  x="1106.48" y="191.5" ></text>
</g>
<g >
<title>BytecodeHandler:CreateRegExpLiteral (2 samples, 0.41%)</title><rect x="529.1" y="197" width="4.8" height="15.0" fill="rgb(236,211,20)" rx="2" ry="2" />
<text  x="532.10" y="207.5" ></text>
</g>
<g >
<title>v8::base::hash_value (1 samples, 0.20%)</title><rect x="1173.2" y="165" width="2.4" height="15.0" fill="rgb(216,34,48)" rx="2" ry="2" />
<text  x="1176.18" y="175.5" ></text>
</g>
<g >
<title>v8::UnboundScript::BindToCurrentContext (1 samples, 0.20%)</title><rect x="1086.7" y="165" width="2.4" height="15.0" fill="rgb(224,52,19)" rx="2" ry="2" />
<text  x="1089.66" y="175.5" ></text>
</g>
<g >
<title>_start (15 samples, 3.05%)</title><rect x="639.7" y="197" width="36.0" height="15.0" fill="rgb(245,112,31)" rx="2" ry="2" />
<text  x="642.65" y="207.5" >_st..</text>
</g>
<g >
<title>KeyedLoadIC:A keyed load IC from the snapshot (1 samples, 0.20%)</title><rect x="562.7" y="181" width="2.5" height="15.0" fill="rgb(235,170,5)" rx="2" ry="2" />
<text  x="565.75" y="191.5" ></text>
</g>
<g >
<title>v8::base::OS::FPrint (1 samples, 0.20%)</title><rect x="1182.8" y="197" width="2.4" height="15.0" fill="rgb(207,206,47)" rx="2" ry="2" />
<text  x="1185.79" y="207.5" ></text>
</g>
<g >
<title>ERR_load_strings (1 samples, 0.20%)</title><rect x="1113.1" y="85" width="2.4" height="15.0" fill="rgb(205,155,17)" rx="2" ry="2" />
<text  x="1116.10" y="95.5" ></text>
</g>
<g >
<title>v8::Object::Set (2 samples, 0.41%)</title><rect x="1103.5" y="165" width="4.8" height="15.0" fill="rgb(238,125,44)" rx="2" ry="2" />
<text  x="1106.48" y="175.5" ></text>
</g>
<g >
<title>node::InternalModuleStat (2 samples, 0.41%)</title><rect x="1117.9" y="197" width="4.8" height="15.0" fill="rgb(222,80,7)" rx="2" ry="2" />
<text  x="1120.90" y="207.5" ></text>
</g>
<g >
<title>all (491 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(239,40,39)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>int_err_set_item (1 samples, 0.20%)</title><rect x="1110.7" y="53" width="2.4" height="15.0" fill="rgb(210,219,53)" rx="2" ry="2" />
<text  x="1113.69" y="63.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (1 samples, 0.20%)</title><rect x="673.3" y="101" width="2.4" height="15.0" fill="rgb(217,83,12)" rx="2" ry="2" />
<text  x="676.30" y="111.5" ></text>
</g>
<g >
<title>node::LoadEnvironment (3 samples, 0.61%)</title><rect x="639.7" y="149" width="7.2" height="15.0" fill="rgb(232,194,7)" rx="2" ry="2" />
<text  x="642.65" y="159.5" ></text>
</g>
<g >
<title>_IO_file_xsputn (1 samples, 0.20%)</title><rect x="1182.8" y="165" width="2.4" height="15.0" fill="rgb(254,213,49)" rx="2" ry="2" />
<text  x="1185.79" y="175.5" ></text>
</g>
<g >
<title>_IO_do_write (3 samples, 0.61%)</title><rect x="666.1" y="85" width="7.2" height="15.0" fill="rgb(222,226,22)" rx="2" ry="2" />
<text  x="669.09" y="95.5" ></text>
</g>
<g >
<title>node::DefineJavaScript (2 samples, 0.41%)</title><rect x="1096.3" y="181" width="4.8" height="15.0" fill="rgb(233,56,51)" rx="2" ry="2" />
<text  x="1099.27" y="191.5" ></text>
</g>
<g >
<title>vfprintf (3 samples, 0.61%)</title><rect x="666.1" y="117" width="7.2" height="15.0" fill="rgb(210,71,39)" rx="2" ry="2" />
<text  x="669.09" y="127.5" ></text>
</g>
<g >
<title>vsnprintf (1 samples, 0.20%)</title><rect x="473.8" y="165" width="2.4" height="15.0" fill="rgb(249,229,29)" rx="2" ry="2" />
<text  x="476.83" y="175.5" ></text>
</g>
<g >
<title>BytecodeHandler:Mov (1 samples, 0.20%)</title><rect x="594.0" y="197" width="2.4" height="15.0" fill="rgb(218,89,20)" rx="2" ry="2" />
<text  x="596.99" y="207.5" ></text>
</g>
<g >
<title>lh_insert (1 samples, 0.20%)</title><rect x="1113.1" y="53" width="2.4" height="15.0" fill="rgb(205,48,35)" rx="2" ry="2" />
<text  x="1116.10" y="63.5" ></text>
</g>
<g >
<title>memcmp (1 samples, 0.20%)</title><rect x="779.0" y="165" width="2.4" height="15.0" fill="rgb(252,37,35)" rx="2" ry="2" />
<text  x="782.04" y="175.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.20%)</title><rect x="1072.2" y="149" width="2.4" height="15.0" fill="rgb(206,156,9)" rx="2" ry="2" />
<text  x="1075.24" y="159.5" ></text>
</g>
<g >
<title>ERR_load_ASN1_strings (1 samples, 0.20%)</title><rect x="1110.7" y="85" width="2.4" height="15.0" fill="rgb(220,71,49)" rx="2" ry="2" />
<text  x="1113.69" y="95.5" ></text>
</g>
<g >
<title>memcpy (1 samples, 0.20%)</title><rect x="1170.8" y="165" width="2.4" height="15.0" fill="rgb(211,100,4)" rx="2" ry="2" />
<text  x="1173.77" y="175.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (1 samples, 0.20%)</title><rect x="1074.6" y="149" width="2.4" height="15.0" fill="rgb(236,58,24)" rx="2" ry="2" />
<text  x="1077.64" y="159.5" ></text>
</g>
<g >
<title>uloc_forLanguageTag_60 (1 samples, 0.20%)</title><rect x="521.9" y="181" width="2.4" height="15.0" fill="rgb(220,183,18)" rx="2" ry="2" />
<text  x="524.89" y="191.5" ></text>
</g>
<g >
<title>icu_60::RuleBasedCollator::doCompare (4 samples, 0.81%)</title><rect x="704.5" y="181" width="9.7" height="15.0" fill="rgb(239,96,11)" rx="2" ry="2" />
<text  x="707.54" y="191.5" ></text>
</g>
<g >
<title>BytecodeHandler:CallRuntime (15 samples, 3.05%)</title><rect x="488.2" y="197" width="36.1" height="15.0" fill="rgb(242,222,52)" rx="2" ry="2" />
<text  x="491.25" y="207.5" >Byt..</text>
</g>
<g >
<title>vsnprintf (1 samples, 0.20%)</title><rect x="1081.9" y="133" width="2.4" height="15.0" fill="rgb(224,169,11)" rx="2" ry="2" />
<text  x="1084.85" y="143.5" ></text>
</g>
<g >
<title>v8::base::CallOnceImpl (1 samples, 0.20%)</title><rect x="673.3" y="149" width="2.4" height="15.0" fill="rgb(215,156,3)" rx="2" ry="2" />
<text  x="676.30" y="159.5" ></text>
</g>
<g >
<title>BytecodeHandler:StackCheck (1 samples, 0.20%)</title><rect x="625.2" y="197" width="2.4" height="15.0" fill="rgb(223,110,41)" rx="2" ry="2" />
<text  x="628.23" y="207.5" ></text>
</g>
</g>
</svg>
